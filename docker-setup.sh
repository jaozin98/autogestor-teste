#!/bin/bash

# Verificar se deve executar de forma n√£o-interativa
NON_INTERACTIVE=${NON_INTERACTIVE:-false}

echo "üöÄ Configurando AutoGestor com Docker..."

# Verificar se o Docker est√° instalado
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n√£o est√° instalado. Por favor, instale o Docker primeiro."
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå Docker Compose n√£o est√° instalado. Por favor, instale o Docker Compose primeiro."
    exit 1
fi

# Copiar arquivo de ambiente se n√£o existir
if [ ! -f .env.docker ]; then
    echo "üìù Copiando arquivo de ambiente..."
    cp .env.docker.example .env.docker
    echo "‚úÖ Arquivo .env.docker criado. Configure as vari√°veis conforme necess√°rio."
    echo "üîë Gerando chave de criptografia..."
    docker-compose exec app php artisan key:generate
    echo "‚úÖ Chave de criptografia gerada."
fi

# Construir e iniciar os containers
echo "üî® Construindo containers..."
docker-compose build

echo "üöÄ Iniciando containers..."
docker-compose up -d

# Aguardar MySQL estar pronto
echo "‚è≥ Aguardando MySQL estar pronto..."
sleep 30

# Verificar se MySQL est√° respondendo
echo "üîç Verificando conex√£o com MySQL..."
until docker-compose exec mysql mysqladmin ping -h"localhost" --silent; do
    echo "‚è≥ Aguardando MySQL..."
    sleep 5
done
echo "‚úÖ MySQL est√° pronto!"

# Executar comandos do Laravel
echo "üîß Configurando Laravel..."
docker-compose exec app php artisan key:generate

echo "üìä Executando migra√ß√µes..."
if ! docker-compose exec app php artisan migrate; then
    echo "‚ùå Erro ao executar migra√ß√µes"
    exit 1
fi

# Verificar se j√° existem dados no banco
echo "üîç Verificando se seeders j√° foram executados..."
if docker-compose exec app php artisan tinker --execute="echo App\Models\User::count();" 2>/dev/null | grep -q "^[1-9]"; then
    if [ "$NON_INTERACTIVE" = "true" ]; then
        echo "‚ö†Ô∏è  Dados j√° existem no banco. Executando seeders com --force (modo n√£o-interativo)"
        echo "üå± Executando seeders..."
        if ! docker-compose exec app php artisan db:seed --force; then
            echo "‚ùå Erro ao executar seeders"
            exit 1
        fi
    else
        echo "‚ö†Ô∏è  Dados j√° existem no banco. Deseja executar os seeders novamente? (s/N)"
        read -r response
        if [[ "$response" =~ ^[Ss]$ ]]; then
            echo "üå± Executando seeders..."
            if ! docker-compose exec app php artisan db:seed --force; then
                echo "‚ùå Erro ao executar seeders"
                exit 1
            fi
        else
            echo "‚è≠Ô∏è  Pulando execu√ß√£o dos seeders"
        fi
    fi
else
    echo "üå± Executando seeders..."
    if ! docker-compose exec app php artisan db:seed; then
        echo "‚ùå Erro ao executar seeders"
        exit 1
    fi
fi
echo "üßπ Limpando caches..."
docker-compose exec app php artisan cache:clear
docker-compose exec app php artisan config:clear
docker-compose exec app php artisan route:clear
docker-compose exec app php artisan view:clear
docker-compose exec app php artisan permissions:clear-cache
echo "‚ö° Otimizando aplica√ß√£o..."
docker-compose exec app php artisan optimize

# Configurar permiss√µes
echo "üîê Configurando permiss√µes..."
docker-compose exec app chown -R www-data:www-data /var/www/html/storage
docker-compose exec app chown -R www-data:www-data /var/www/html/bootstrap/cache
docker-compose exec app chmod -R 755 /var/www/html/storage
docker-compose exec app chmod -R 755 /var/www/html/bootstrap/cache

echo "‚úÖ Setup conclu√≠do!"
echo "üåê Aplica√ß√£o dispon√≠vel em: http://localhost:8000"
echo "üóÑÔ∏è  MySQL (dev): localhost:3306"
echo "üß™ MySQL (test): localhost:3307"
echo "üî¥ Redis: localhost:6379"
echo ""
echo "üìã Comandos √∫teis:"
echo "  - docker-compose up -d          # Iniciar containers"
echo "  - docker-compose down           # Parar containers"
echo "  - docker-compose logs -f app    # Ver logs da aplica√ß√£o"
echo "  - docker-compose exec app bash  # Acessar container da aplica√ß√£o"
echo "  - docker-compose exec app php artisan migrate:fresh --seed  # Recriar banco"
echo "  - docker-compose exec app php artisan cache:clear           # Limpar cache"
echo "  - docker-compose exec app php artisan permissions:clear-cache # Limpar cache de permiss√µes"
echo "  - docker-compose exec app php artisan test                  # Executar testes"
echo ""
echo "üîÑ Para executar o setup de forma n√£o-interativa:"
echo "  - NON_INTERACTIVE=true ./docker-setup.sh"
